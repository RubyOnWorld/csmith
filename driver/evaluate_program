#!/usr/bin/perl 

use strict;
use warnings;
use Benchmark;
use English;
use LockFile::Simple;
use File::Temp qw/ tempfile tempdir /;
use File::Copy;
use Cwd;

# TODO: check for program crash (vs. timeout)

# properly propagate run_program failures upwards

# distinguish between programs that compile and those that run inside
# the timeout

####################################################################

my $xxtra = "-DCSMITH_MINIMAL";

#my $notmp = "-DUSE_MATH_MACROS_NOTMP";
my $notmp = "";

my $COMPILER_TIMEOUT = 300;

my $COMPILER_TIMEOUT_RES = 137;

my $RUN_PROGRAM = 1;

my $DO_REDUCE = 1;

####################################################################

my $CSMITH_HOME=$ENV{"CSMITH_HOME"};
die "oops: CSMITH_HOME environment variable needs to be set" 
    unless defined($CSMITH_HOME);

my $LOCKFN = "/var/tmp/version_search_lockfile";

####################################################################

my @gcc_opts = (
    "-O0", 
    "-O1", 
    "-Os", 
    "-O2", 
    "-Ofast");

my @o0only = (
    "-O0", 
    "-O1", 
    "-Os", 
    "-O2", 
    "-Ofast");

my @occomp = ("-fall");
# my @occomp = (" -fbitfields -fstruct-return ");

my @gcc_opts3 = (
    "-O0", 
    "-O1", 
    "-O2", 
    "-Os", 
    "-O3",
    );

my @clang = ("clang",
	     "clang",
	     \@o0only);

my @ccomp = ("ccomp",
	     "ccomp",
	     \@occomp);

my @gcc400 = ("gcc400",
	     "/mnt/local/randomtest/gcc-4.0.0-install/bin/gcc",
	     \@gcc_opts3);

my @gcc410 = ("gcc410",
	     "/mnt/local/randomtest/gcc-4.1.0-install/bin/gcc",
	     \@gcc_opts3);

my @gcc420 = ("gcc420",
	     "/mnt/local/randomtest/gcc-4.2.0-install/bin/gcc",
	     \@gcc_opts3);

my @gcc430 = ("gcc430",
	     "/mnt/local/randomtest/gcc-4.3.0-install/bin/gcc",
	     \@gcc_opts3);

my @gcc440 = ("gcc440",
	     "/mnt/local/randomtest/gcc-4.4.0-install/bin/gcc",
	     \@gcc_opts3);

my @gcc46 = ("gcc",
	     "gcc-4.6",
	     \@gcc_opts3);

my @gcc47 = ("gcc",
	     "gcc-4.7",
	     \@gcc_opts3);

my @gcc45 = ("gcc",
	      "gcc-4.5",
	      \@gcc_opts3);

my @gcc44 = ("gcc",
	      "gcc-4.4",
	      \@gcc_opts3);

my @gcccurrent = ("gcc",
		  "gcc",
		  \@o0only);

my @compilers_to_test = (

    #\@gcc400,
    #\@gcc410,
    #\@gcc420,
    #\@gcc430,
    #\@gcc440,

    \@clang,
    \@gcccurrent,
    #\@ccomp,

    #\@gcc44,
    #\@gcc45,
    #\@gcc46,
    #\@gcc410,
    );

####################################################################

# properly parse the return value from system()
sub runit ($) {
    my $cmd = shift;

    my $start = new Benchmark;
    my $res = (system "$cmd");
    my $end = new Benchmark;
    my $dur = timediff($end, $start);
    my $exit_value  = $? >> 8;
    return ($exit_value, $dur);
}

# build and run the app, with timeouts for both the compiler and the program
sub compile_and_run ($$$$) {
    (my $root, my $compiler, 
     my $opt, my $custom_options) = @_;

    print "$compiler $opt : ";

    my $opt_str = $opt;
    ($opt_str =~ s/\ //g);
    ($opt_str =~ s/\://g);
    ($opt_str =~ s/\-//g);
    ($opt_str =~ s/\///g);
    if (length($opt_str)>40) {
	$opt_str = substr ($opt_str, 0, 40);
    }
    
    my $exe = "${root}${compiler}${opt_str}_exe";
    ($exe =~ s/\.//g);
    ($exe =~ s/\///g);

    my $srcfile = "$root.c";

    my $out = "${exe}.out";
    my $compilerout = "${exe}_compiler.out";

    my $command = "RunSafely $COMPILER_TIMEOUT 1 /dev/null $compilerout $compiler $opt $xxtra $notmp -I${CSMITH_HOME}/runtime $srcfile -o $exe $custom_options $notmp ";

    print "$command\n";
    
    (my $res, my $dur) = runit ($command);

    if (($res != 0) || (!(-e $exe))) {
	my $crashout = "";
	if ($res == $COMPILER_TIMEOUT_RES) {
	    print STDERR "COMPILER FAILURE: TIMEOUT\n";
	} else {
	    print STDERR "COMPILER FAILURE with return code $res; output is:\n";
	    open INF, "<$compilerout" or die;
	    while (my $line = <INF>) { print "  $line"; $crashout .= $line }
	    close INF;
	}
	return (-2,$crashout,-1);
    }
    
    if (!$RUN_PROGRAM) {
	return (0,"");
    }

    ($res, $dur) = runit ("run_program $exe $srcfile $compiler > $out");

    if ($res != 0) {
	print "couldn't compute access summary\n";
	return (-1,"");
    }
    
    my $result = "";

    open INF, "<$out" or die;
    while (my $line = <INF>) {
	$result .= $line;
    }
    close INF;

    return (0,$result);
}

sub instantiate_test_scripts ($$$$) {
    (my $infn, my $opt1, my $opt, my $base_compiler) = @_;
    open INF, "<$infn" or die;
    open OUTF, ">./test1.sh" or die;
    while (<INF>) {
	(s/XX_WORKING_OPT/$opt1/g);
	(s/XX_BROKEN_OPT/$opt/g);
	if ($base_compiler eq "llvm") {
	    (s/XX_COMPILER/llvm-gcc/g);
	} elsif ($base_compiler eq "gcc") {
	    (s/XX_COMPILER/gcc/g);
	} else {
	    die;
	}
	print OUTF;
    }
    close INF;
    close OUTF;
    open INF, "<$infn" or die;
    open OUTF, ">./test2.sh" or die;
    while (<INF>) {
	(s/XX_WORKING_OPT/$opt1/g);
	(s/XX_BROKEN_OPT/$opt/g);
	(s/XX_COMPILER/\$1/g);
	print OUTF;
    }
    close INF;
    close OUTF;
    runit ("chmod a+x ./test1.sh") || die;
    runit ("chmod a+x ./test2.sh") || die;
}

my $lockmgr;

sub lockit() {
    $lockmgr = LockFile::Simple->make (
	-autoclean => 1,
	-max => 10, 
	-nfs => 1,
	-hold => 15000,			    
	-stale => 1,
	);
    my $res = $lockmgr->lock($LOCKFN);
    return $res;
}

sub unlockit() {
    $lockmgr->unlock($LOCKFN);
}

sub reduce_miscompile ($$$$$$) {
    (my $compiler, my $templ, 
     my $opt1, my $opt, 
     my $root, my $base_compiler) = @_;
     if (lockit()) {
	 my $res;
	 print "diffing $opt1 and $opt\n";			    
	 runit "cp $root.c small.c" or die;
	 instantiate_test_scripts ($templ, $opt1, $opt, $base_compiler);		
	 runit ("reduce_miscompile > reduce_log.txt 2>&1");
	 print ("reduced size: ");
	 runit ("wc -c small.c");
	 unlockit();			
     }
}

sub bug_count ($) {
    (my $err) = @_;
    my $lines = "";
    my $found = 0;
    my $cnt;
    open INF,"../crash_strings.txt" or die;
    while (my $line = <INF>) {
	die unless ($line =~ /^([0-9]+) <<< (.*) >>>$/);
	if ($2 eq $err) {
	    $found = 1;
	    $cnt = 1 + $1;
	    $lines .= "$cnt <<< $err >>>\n";
	} else {
	    $lines .= $line;
	}
    }
    close INF;
    if (!$found) {
	$cnt = 1;
	$lines .= "$cnt <<< $err >>>\n";    
    }
    open OUTF, ">../crash_strings.txt" or die;
    print OUTF $lines;
    close OUTF;
    return $cnt;
}

sub reduce_crash ($$$$$) {
    (my $compiler, my $fail_opt, my $root, my $base_compiler, my $fail_out) = @_;

    my $err;
    if ($fail_out =~ /internal compiler error: (.*)$/m) {
	$err = $1;
    } elsif ($fail_out =~ /Assertion(.*)failed./m) {
	$err = $1;
    } else {
	print "FAILURE to reduce: no ICE message\n";
	return;
    }

    $err =~ s/[.*+?|\(\)\'\"\`\[\]\{\}\\]/\\$&/g;

    my $cnt = bug_count ($err);
    print "this bug has been seen $cnt time(s)\n";
    my $prob = 5.0 / $cnt;
    if (rand() > $prob) {
	print "we'll skip reducing this time\n";
	return;
    }

    my $tempdir = tempdir ( "reduce_XXXXXX", DIR => "../", CLEANUP => 0 );
    print "ok: reducing crash bug for $compiler at $fail_opt in $tempdir with '$err'\n";
    File::Copy::cp ("$root.c", $tempdir);
    runit "gcc -E -I${CSMITH_HOME}/runtime -DCSMITH_MINIMAL ${root}.c > $tempdir/small.c";
    open INF, "<${CSMITH_HOME}/driver/test1_crash.sh" or die;
    open OUTF, ">$tempdir/test1.sh" or die;
    my $origdir = getcwd;
    my $updir = "${origdir}/../bonus_crashes";
    my $str = "${origdir}/../crash_strings.txt";
    while (my $line = <INF>) {
	$line =~ s/XX_COMMAND/$compiler/;
	$line =~ s/XX_STRING/'$err'/;
	$line =~ s/XX_CRASHFILE/$str/;
	$line =~ s/XX_DIR/$updir/;
	$line =~ s/XX_COMPILER/${base_compiler}/;
	$line =~ s/XX_OPT/${fail_opt}/;
	print OUTF $line;
    }
    close INF;
    close OUTF;
    runit "chmod a+rx $tempdir/test1.sh";
    chdir $tempdir or die;
    print "timestamp for creduce start: ";
    system "date";
    runit "creduce -n 1 --fuzz --sllooww --sanitize ./test1.sh small.c";
    print "timestamp for creduce stop: ";
    system "date";
    chdir $origdir or die;
}

sub test_compiler ($$$) {
    (my $root, my $compiler_ref, my $custom_options) = @_;

    (my $base_compiler, my $compiler, my $optref) = @{$compiler_ref};
    my @OPTS = @{$optref};

    my $undef;

    print "--------------------\n";

    my %results;
    my %csums;
    my $success = 0;
    my $compiler_fail = 0;

    my %var_reads;
    my %var_writes;
    my %num_reads;
    my %num_writes;
    my $first = 1;
    my $fail_opt;
    my $fail_out;

    foreach my $opt (@OPTS) {
	(my $res, my $res_str) = 
	    compile_and_run ($root, $compiler, 
			     $opt, $custom_options);
        $num_reads{$opt} = 0;
        $num_writes{$opt} = 0;
	if ($res == 0) {
	    $success++;
	    if ($RUN_PROGRAM) {
		my $checksum_regex = "checksum = (TIMEOUT|[0-9a-fA-F]+)\\s*";
		die if ((!($res_str =~ s/$checksum_regex//)) &&
		        (!($res_str =~ "TIMEOUT")));
		my $csum = $1;
		print "$res_str";
		print "checksum = $csum\n";
		$results{$opt} = $res_str;
		$csums{$opt} = $csum;

		my $tot_reads = 0;
		my $tot_writes = 0;
		
		while ($res_str =~ /([0-9a-zA-Z\_]+): ([0-9]+) reads, ([0-9]+) writes/g) {
		    $var_reads{$opt}{$1} = $2;
		    $var_writes{$opt}{$1} = $3;
		    $num_reads{$opt} += $2;
		    $num_writes{$opt} += $3;
		    $tot_reads += $2;
		    $tot_writes += $3;
		}

		$first = 0;

	    }
	} elsif ($res == -2) {
	    $compiler_fail++;
	    if (!defined($fail_opt) || rand() < 0.5) {
		$fail_opt = $opt;
		$fail_out = $res_str;
	    }
	} else {
	    die if ($res != -1);
	    return (1, 0, $undef, $undef);
	}
    }

    my $result;
    my $csum;
    my $writes;
    my $interesting = 0;

    if ($compiler_fail > 0) {
	print "COMPILER FAILED $compiler\n";
	$interesting = 1;
	if ($DO_REDUCE) {
	    reduce_crash ($compiler, $fail_opt, $root, $base_compiler, $fail_out);
	}
    }

    if ($success > 0) {
	
	my $consistent = 1;
	my $opt1;
	
	foreach my $opt (keys %results) {

	    if (defined($result)) {
		if (($csum ne $csums{$opt}) &&
		    ($csum ne "TIMEOUT" && $csums{$opt} ne "TIMEOUT")) {
		    print "INTERNAL CHECKSUM FAILURE $compiler $opt\n";
		    $interesting = 1;
		    if ($DO_REDUCE && 0) {
			die;
			reduce_miscompile ($compiler, 
					   "test-${base_compiler}-wrong-code-template.sh", 
					   $opt1, $opt, $root, $base_compiler);
		    }
		    $consistent = 0;
		    last;
		}
	    } else {
		$writes = $num_writes{$opt};
		$opt1 = $opt;
		$result = $results{$opt};
		$csum = $csums{$opt};				
	    }
	}

	return (0, $consistent, $result, $csum, $interesting);

    } else {
	return (0, 0, $result, $csum, $interesting);
    }
}

sub test_program ($$) {
    (my $root, my $custom_options) = @_;

    my $vcount;
    my %mt;

    my $result;
    my $csum;

    my $interesting = 0;

    foreach my $compiler_ref (@compilers_to_test) {
	(my $abort_test, my $consistent, my $tmp_result, my $tmp_csum, my $tmp_interesting) = 
	    test_compiler ($root, $compiler_ref, $custom_options);
	return -1 if ($abort_test != 0);
	
	if ($tmp_interesting) {
	    $interesting = 1;
	}
	
	(my $base_compiler, my $compiler, my $optref) = @{$compiler_ref};
	print "COMPLETED TEST $compiler\n";
	
	# ignore internally inconsistent results
	if ($consistent) {
	    if (defined ($result) &&
		defined ($csum)) {
		if (($csum ne $tmp_csum) &&
		    ($csum ne "TIMEOUT") &&
		    ($tmp_csum ne "TIMEOUT")) {
		    print "EXTERNAL CHECKSUM FAILURE\n";
		    $interesting = 1;
		}
	    } else {
		$result = $tmp_result;
		$csum = $tmp_csum;
	    }
	}
    }

    if ($interesting) {
	return 1;
    } else {
	return 0;
    }
}

####################################################################

die "expecting filename" if scalar(@ARGV < 1);

my $fn = $ARGV[0];

my $custom_options = "";
if (scalar(@ARGV)==2) {
    $custom_options = $ARGV[1];
}

my $res = test_program ($fn, $custom_options);
exit ($res);

####################################################################

